#+OPTIONS: toc:nil num:t
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper,12pt]
#+LATEX_HEADER: \usepackage[T1]{fontenc} % For times new roman font
#+LATEX_HEADER: \usepackage{mathptmx} % For times new roman font
#+LATEX_HEADER: \linespread{1.3} % Change line spacing
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{soul}
#+LATEX_HEADER: \usepackage{helvet}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage{xcolor-solarized}
#+LATEX_HEADER: \definecolor{foreground}{RGB}{184, 83, 83} % For verbatim
#+LATEX_HEADER: \definecolor{background}{RGB}{255, 231, 231} % For verbatim
#+LATEX_HEADER: \let\OldTexttt\texttt
#+LATEX_HEADER: \renewcommand{\texttt}[1]{\OldTexttt{\colorbox{background}{\textcolor{foreground}{#1}}}}
#+LATEX_HEADER: \newenvironment{helvetica}{\fontfamily{phv}\selectfont}{\par}
#+LATEX_HEADER: \usepackage{hyperref} % Make the hyper-links prettier
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER: colorlinks=true,
#+LATEX_HEADER: linkcolor=blue!70!white,
#+LATEX_HEADER: urlcolor=blue!95!black
#+LATEX_HEADER: }
#+LATEX_HEADER: \lstdefinelanguage{cpp}{
#+LATEX_HEADER: language=C++,
#+LATEX_HEADER: morekeywords={cerr,exit,string},
#+LATEX_HEADER: deletekeywords={...},
#+LATEX_HEADER: escapeinside={\%*}{*)},
#+LATEX_HEADER: showspaces=false,
#+LATEX_HEADER: showstringspaces=false,
#+LATEX_HEADER: showtabs=false,
#+LATEX_HEADER: stepnumber=1,
#+LATEX_HEADER: tabsize=4,
#+LATEX_HEADER: breakatwhitespace=false,
#+LATEX_HEADER: breaklines=true,
#+LATEX_HEADER: backgroundcolor=\color{solarized-base3},
#+LATEX_HEADER: basicstyle=\scriptsize\ttfamily\color{solarized-base0},
#+LATEX_HEADER: commentstyle=\itshape\color{solarized-base01},
#+LATEX_HEADER: keywordstyle=\color{solarized-green},
#+LATEX_HEADER: identifierstyle=\color{solarized-blue},
#+LATEX_HEADER: stringstyle=\color{solarized-cyan},
#+LATEX_HEADER: moredelim = *[l][\color{solarized-orange}]{\#},
#+LATEX_HEADER: moredelim = **[s][\color{solarized-cyan}]{<}{>},
#+LATEX_HEADER: rulecolor=\color{black},
#+LATEX_HEADER: literate={{\%d}}{{\textcolor{solarized-red}{\%d}}}2
#+LATEX_HEADER:           {{\%2d}}{{\textcolor{solarized-red}{\%2d}}}3
#+LATEX_HEADER:           {{\\n}}{{\textcolor{solarized-red}{\textbackslash{}n}}}2,
#+LATEX_HEADER: }

#+BEGIN_EXPORT latex
% This is the title page
\thispagestyle{empty} % No page number on the first page
\begin{center}
\begin{helvetica}
{\huge\textbf{Software Quality}\par}
{\huge\textbf{SOFE 3980U}\par}
  \vspace{20mm}
  \includegraphics[scale=1.3]{uoit_logo.png}\\
  \vspace{40mm}
  \begin{large}
      \textbf{Group 6}
      \text{, Final Project}\\
      \text{JSO, A differential Evolution library in C++}\\
      \vspace{25mm}
      \textbf{George Zackarov 10000000}\\
      \textbf{Justin Kaipada 100590167}\\
      \textbf{Logan McDonald 10000000}\\
      \textbf{Zackarry Winn 10000000}
  \end{large}
\end{helvetica}
\end{center}
\newpage
\tableofcontents
\newpage
#+END_EXPORT

* Abstract
The aim of our work was to further develop our knowledge in Software Quality while
implementing/re-factoring a useful piece of software library. Header only libraries are among the
most widely used types of C++ frameworks known for their simplicity of use and dependency
management. In this project we set out to develop a Header only library by re-factoring and
re-designing some of the Work written by Janez Brest /et al[fn:1]/ named as *JSO*, which is a hybrid
differential evolution algorithm. The piece of code we are re-factoring was written for benchmarks
and research purposes, we made it into library that anyone can use for Optimization problems. The
quality of the code was highly improved using Modern C++ techniques and making the library less
confusing to use as possible. This allows the end user to use this library by writing less coupling
code to connect his/her fitness function to our Optimization function.
#+LATEX: \newpage
[fn:1] All authors http://ieeexplore.ieee.org/abstract/document/7969456/authors

* Introduction
*JSO* is a differential evolution algorithm presented in the Congress on Evolutionary
Computation(CEC) 2017. It is a single objective real parameter optimization algorithm written by the
3 main authors Janez Brest, Mirjam Sepesy Maučec and Borko Bošković, all working for the Faculty of
Electrical Engineering and Computer Science, University of Maribor. Our aim was to make use of this
algorithm and the source code they provided to build a library that anyone can use by redesigning
the original source code that was written just for benchmarking and proof of work. The source code
was also presented at /CEC17/. But not distributed anywhere in the form of a library. We where able to
get hold of the source code and with the permission of the authors work on it make a C++ library out
of it. JSO is hybrid algorithm that was designed after many years and iterations of algorithm which
can solve optimization problems faster for problems with bigger dimensions. This is was the second
best algorithm presented in /CEC17/.

* Design Choices
Sample for testing formatting
#+ATTR_LATEX: :options language=cpp,numbers=none
#+BEGIN_SRC C++
class SearchAlgorithm
{
   public:
    virtual Fitness run() = 0;
    virtual ~SearchAlgorithm() {}
    std::function<void(double*, double*)> fitness_function;  // Function pointer
    int problem_size;  // Dimension of the problem being solved
    int memory_size;
    int pop_size;                      // Population size
    unsigned int max_num_evaluations;  // Max number of evaluations
    double p_best_rate;
    double arc_rate;
    double max_region;  // Minimum point of the domain of search
    double min_region;  // Minimum point of the domain of search
    Fitness optimum;    // The goal fitness to be reached
    Fitness epsilon;    // Acceptable error value
};
#+END_SRC

* Implementation Challenges
1914 translation by H. Rackham "On the other hand, we denounce with righteous indignation and
dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded
by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame
belongs to those who fail in their duty through weakness of will, which is the same as saying
through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a
free hour, when our power of choice is untrammelled and when nothing prevents our being able to do
what we like best, every pleasure is to be welcomed and every pain avoided. But in certain
circumstances and owing to the claims of duty or the obligations of business it will frequently
occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always
holds in these matters to this principle of selection: he rejects pleasures to secure other greater
pleasures, or else he endures pains to avoid worse pains."
* Conclusion
Section 1.10.33 of "de Finibus Bonorum et Malorum", written by Cicero in 45 BC "At vero eos et
accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque
corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique
sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem
rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio
cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est,
omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus
saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic
tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut
perferendis doloribus asperiores repellat."
