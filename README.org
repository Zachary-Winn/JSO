* JSO
[[https://travis-ci.org/justinjk007/JSO][https://travis-ci.org/justinjk007/JSO.svg?branch=master#.svg]]
[[https://ci.appveyor.com/project/justinjk007/jso][https://ci.appveyor.com/api/projects/status/kuv6oxtq8hn6hr2t?svg=true3.svg]]
[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPLv3-blue.svg]]
[[https://isocpp.org/][https://img.shields.io/badge/language-C++-blue.svg]]
[[https://en.wikipedia.org/wiki/C%2B%2B11][https://img.shields.io/badge/C%2B%2B-11-blue.svg]]

A differential evolution optimization library written in C++ 11.

Single Objective Real-Parameter Optimization algorithm with
self-adaptive Cross-over rate and scaling factor.

JSO is improved version of iL-SHADE.

iL-SHADE: Improved L-SHADE Algorithm (L-SHADE was proposed by Ryoji
Tanabe and Alex Fukunaga at CEC2014).

** Usage
This is a header only library, include =JSO.hpp= from the include folder
and you are done.

To optimize a function it should have the following *signature*

=void your_fitness_function (double* ,double*)=

here the first pointer will point towards a vector of the parameters
you need for your fitness function and second double pointer should
hold the fitness value you calculate when it returns.

*** Example, using a regular function
Say =rastrigin_func(double*,double*)= is defined, it can be optimized
like this.

#+BEGIN_SRC c++
JSO::JSO algorithm(rastrigin_func, 2, -5.12, 5.12);
algorithm.run();
#+END_SRC
- Here =rastrigin_func= is the name of the function.
- =2= is the dimension of the problem/ no: of parameters needed for your fitness function.
- =-5.12= is the minimum value of the population.
- =-5.12= is the maximum value of the population.
- The code will exit after maximum iterations or based on your exit criteria.

*** Example, using a member function
Say =Foo::sphere_func(double*,double*)= is defined, it can be optimized
like this using a *lambda*

#+BEGIN_SRC c++
using namspace JSO;
Foo obj;
JSO algorithm([&obj](double* p1, double* p2) { obj.sphere_func(p1, p2); }, 2, -100, 100);
algorithm.run();
#+END_SRC

** All original authors
- [[mailto:janez.brest@um.si][Janez Brest]]
- Mirjam Sepesy Maucec
- Borko Boskovic
- [[mailto:rt.ryoji.tanabe@gmail.com][Ryoji Tanabe]]
- Alex Fukunaga

Also, thanks to [[https://cpplang.now.sh/][cpp-slack]]
